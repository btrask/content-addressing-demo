#!/usr/bin/python3
# Copyright 2015 Ben Trask
# MIT licensed (see LICENSE for details)

import argparse
import re
import sys
import os
from os import path

parser = argparse.ArgumentParser(description="Content addressable storage lookup")
parser.add_argument("--path", action="store_true")
parser.add_argument("uri")
args = parser.parse_args()

repo = path.join(path.expanduser("~"), ".local", "cas-demo")
data = path.join(repo, "data")

def parse_uri(uri):
	exp = re.compile(r"^hash:\/\/([\w\d.-]+)\/([\w\d.%_-]+)(\?[\w\d.%_=&-]+)?(#[\w\d.%_-]+)?$", re.IGNORECASE)
	match = exp.match(uri)
	if not match: return None
	return dict(
		algo=match.group(1),
		hash=match.group(2),
		query=match.group(3),
		fragment=match.group(4)
	)

obj = parse_uri(args.uri)
if not obj:
	print("Invalid hash URI", file=sys.stderr)
	exit(1)

location = path.join(data, obj["algo"], obj["hash"][0:2], obj["hash"])
try: f = os.fdopen(os.open(location, os.O_RDONLY), "rb")
except FileNotFoundError:
	print("File not found", file=sys.stderr)
	exit(1)

if args.path:
	print(location)
else:
	while 1:
		buf = f.read()
		if not buf: break
		sys.stdout.buffer.write(buf)

f.close()

